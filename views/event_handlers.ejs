<script>
  // displayId equal -1 if user disconnected (to reload )
  displayId = -1
  viewData = []
  targetImgId = -1
  function getNextDisplay() {
    const reqData = {
      targetImgId: targetImgId,
      viewData: viewData,
      displayId: displayId
    };
    fetch("/get_next_screen", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(reqData),
    })
      .then((res) => {
        if (!res.ok) { throw Error(res.statusText); }
        return res.json()
      })
      .then((data) => {
        // Handle error

        if (data.error) {
          throw Error(data.error.message);
        }

        viewData = data.viewData;
        displayId = data.displayId
        populateDisplay();

      })
      .catch((e) => {
        console.log("Error: " + JSON.stringify(e.message));
        showGlobalMessage(
          "Request failed!",
          JSON.stringify(e.message),
          5000,
          "e"
        );
      });
  }

  function getThumbPrototype(likedStr, actionStr, id, src) {
    return `<li 
        class="frame-in-grid small-6 medium-4 large-2 cell
        ${likedStr}"
        onclick="${actionStr}" 
        data-frame-id="${id}"
        style="background-image: url('${src}'); background-size: 100% 100%;"
      >
      </li>`;
  }

  function populateDisplay() {
    const elem = document.getElementById("frameGrid");
    frames = viewData;
    let elemHtml = "";

    document.getElementById("target_img").src = frames[0].src;
    targetImgId = frames[0].id;

    // Iterate over all the frames
    for (let i = 1; i < frames.length; ++i) {
      let likedStr = "";
      let actionStr = `like(this, ${frames[i].id})`;

      elemHtml += getThumbPrototype(likedStr, actionStr, frames[i].id, frames[i].src);
    }
    elem.innerHTML = elemHtml;
  }

  function like(el, frameId) {
    console.log("Frame ", frameId, "liked!")

    // Request input data
    const reqData = {
      frameId: frameId,
    };

    let liked = true;
    if (el.classList.contains("liked")) {
      el.classList.remove("liked");
      liked = false;
    }
    else {
      el.classList.add("liked");
      liked = true;
    }

    // Update frames
    for (let i = 1; i < frames.length; ++i) {
      if (frames[i].id === frameId) {
        frames[i].liked = liked;
        break;
      }
    }
  }


  function initDisplay() {
    fetch("/get_next_screen", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    })
      .then((res) => {
        if (!res.ok) { throw Error(res.statusText); }
        return res.json()
      })
      .then((data) => {
        // Handle error

        if (data.error) {
          throw Error(data.error.message);
        }

        viewData = data.viewData;
        displayId = data.displayId
        updateSolvedCounter();
        populateDisplay();

      })
      .catch((e) => {
        if (displayId == 49) {
          displayId++;
          showGlobalMessage("Gratulujeme!", "Gratulujeme, úspěšně jste dokončili anotaci.", 20000, 's');
        } else if (displayId < 49) {
          console.log("Error: " + JSON.stringify(e.message));
          showGlobalMessage(
            "Request failed!",
            JSON.stringify(e.message),
            5000,
            "e"
          );
        }
      });
  }

  function updateSolvedCounter() {
    document.getElementById("solved.counter").innerHTML = displayId;
  }

  initDisplay();
</script>